Skip to content Navigation Menu Toggle navigation Sign in Product GitHub Copilot Write better code with AI Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation. Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert {{ message }} c0rp-aubakirov / lucene-tutorial Public Notifications You must be signed in to change notification settings Fork 1 Star 10 Code Issues 0 Pull requests 0 Actions Projects 0 Security Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights Files master Breadcrumbs lucene-tutorial /src /main /java /kz /kaznu /lucene / BasicSearchExamples.java Copy path Blame Blame Latest commit History History 125 lines (109 loc) · 4.59 KB master Breadcrumbs lucene-tutorial /src /main /java /kz /kaznu /lucene / BasicSearchExamples.java Top File metadata and controls Code Blame 125 lines (109 loc) · 4.59 KB Raw 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 package kz.kaznu.lucene; import org.apache.lucene.analysis.ru.RussianAnalyzer; import org.apache.lucene.index.IndexReader; import org.apache.lucene.index.Term; import org.apache.lucene.queryparser.classic.ParseException; import org.apache.lucene.queryparser.classic.QueryParser; import org.apache.lucene.search.*; import java.io.IOException; public class BasicSearchExamples { public static final int DEFAULT_LIMIT = 10; private final IndexReader reader; public BasicSearchExamples(IndexReader reader) { this.reader = reader; } /** * Search using TermQuery * @param toSearch string to search * @param searchField field where to search. We have "body" and "title" fields * @param limit how many results to return * @throws IOException * @throws ParseException */ public void searchIndexWithTermQuery(final String toSearch, final String searchField, final int limit) throws IOException, ParseException { final IndexSearcher indexSearcher = new IndexSearcher(reader); final Term term = new Term(searchField, toSearch); final Query query = new TermQuery(term); final TopDocs search = indexSearcher.search(query, limit); final ScoreDoc[] hits = search.scoreDocs; showHits(hits); } /** * This is wrapper to searchIndexWithTermQuery * It executes searchIndexWithTermQuery using "body" field and limiting to 10 results * * @param toSearch string to search in the "body" field * @throws IOException * @throws ParseException */ public void searchIndexWithTermQueryByBody(final String toSearch) throws IOException, ParseException { searchIndexWithTermQuery(toSearch, "body", DEFAULT_LIMIT); } /** * Search in body using QueryParser * @param toSearch string to search * @param limit how many results to return * @throws IOException * @throws ParseException */ public void searchInBody(final String toSearch, final int limit) throws IOException, ParseException { final IndexSearcher indexSearcher = new IndexSearcher(reader); final QueryParser queryParser = new QueryParser("body", new RussianAnalyzer()); final Query query = queryParser.parse(toSearch); System.out.println("Type of query: " + query.getClass().getSimpleName()); final TopDocs search = indexSearcher.search(query, limit); final ScoreDoc[] hits = search.scoreDocs; showHits(hits); } /** * This is wrapper to searchInBody function * it executes searchInBody with default limiting to 10 results * * @param toSearch * @throws IOException * @throws ParseException */ public void searchInBody(final String toSearch) throws IOException, ParseException { searchInBody(toSearch, DEFAULT_LIMIT); } /** * Search using FuzzyQuery. * @param toSearch string to search * @param searchField field where to search. We have "body" and "title" fields * @param limit how many results to return * @throws IOException * @throws ParseException */ public void fuzzySearch(final String toSearch, final String searchField, final int limit) throws IOException, ParseException { final IndexSearcher indexSearcher = new IndexSearcher(reader); final Term term = new Term(searchField, toSearch); final int maxEdits = 2; // This is very important variable. It regulates fuzziness of the query final Query query = new FuzzyQuery(term, maxEdits); final TopDocs search = indexSearcher.search(query, limit); final ScoreDoc[] hits = search.scoreDocs; showHits(hits); } /** * Wrapper to fuzzySearch function. * It executed fuzzySearch with default limit and body field as target field * * @param toSearch string to search * @throws IOException * @throws ParseException */ public void fuzzySearch(final String toSearch) throws IOException, ParseException { fuzzySearch(toSearch, "body", DEFAULT_LIMIT); } private void showHits(final ScoreDoc[] hits) throws IOException { if (hits.length == 0) { System.out.println("\n\tНичего не найдено"); return; } System.out.println("\n\tРезультаты поиска:"); for (ScoreDoc hit : hits) { final String title = reader.document(hit.doc).get("title"); final String body = reader.document(hit.doc).get("body"); System.out.println("\n\tDocument Id = " + hit.doc + "\n\ttitle = " + title + "\n\tbody = " + body); } } } Footer © 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time.